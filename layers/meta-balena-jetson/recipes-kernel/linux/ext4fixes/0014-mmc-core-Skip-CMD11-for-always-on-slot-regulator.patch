From 5ae07d07806eda330d9b2b803e50540b1b6f3640 Mon Sep 17 00:00:00 2001
From: Aniruddha Rao <anrao@nvidia.com>
Date: Wed, 12 Jun 2019 11:11:46 +0530
Subject: [PATCH 4/5] mmc: core: Skip CMD11 for always-on slot regulator

With slot regulator always-on, SW reset does not power cycle the SD card.
As a result, the card continues to stay in 1.8V mode from previous init
cycle and sends S18A=0 in response to CMD8 even though it supports 1.8V
signaling.
Skip CMD11 and set rocr to support 1.8V mode for S18A=0 response from the card
if the slot is fed from always-on supply and continue with UHS mode init.
If S18A=0 response is due to an HS card plugin, all subsequent commands at
1.8V will fail and the host controller enumerates the card in HS mode in the
next retry.

Bug 200523351
Bug 2890583

Change-Id: I0c425d9e5729cda8028a55e7680bae7d07637afe
Signed-off-by: Aniruddha Rao <anrao@nvidia.com>
(cherry-picked from commit fcc52095de61a96be6df6dd708665f9eda9918da)
Reviewed-on: https://git-master.nvidia.com/r/c/linux-4.9/+/2315774
Tested-by: mobile promotions <svcmobile_promotions@nvidia.com>
Reviewed-by: automaticguardword <automaticguardword@nvidia.com>
Reviewed-by: Bibek Basu <bbasu@nvidia.com>
Reviewed-by: mobile promotions <svcmobile_promotions@nvidia.com>
---
 drivers/mmc/core/sd.c          | 31 +++++++++++++++++++++++++++++++
 drivers/mmc/host/sdhci-tegra.c |  3 +++
 include/linux/mmc/host.h       |  1 +
 3 files changed, 35 insertions(+)

diff --git a/drivers/mmc/core/sd.c b/drivers/mmc/core/sd.c
index 7bbc741e8396..c3678b114aaa 100644
--- a/drivers/mmc/core/sd.c
+++ b/drivers/mmc/core/sd.c
@@ -738,6 +738,7 @@ int mmc_sd_get_cid(struct mmc_host *host, u32 ocr, u32 *cid, u32 *rocr)
 	int err;
 	u32 max_current;
 	int retries = 10;
+	int fallback = 0;
 	u32 pocr = ocr;
 	if (host->ops->voltage_switch_req)
 		host->ops->voltage_switch_req(host, false);
@@ -801,6 +802,25 @@ int mmc_sd_get_cid(struct mmc_host *host, u32 ocr, u32 *cid, u32 *rocr)
 			retries = 0;
 			goto try_again;
 		}
+	} else if (!fallback && (host->caps2 & MMC_CAP2_SLOT_REG_ALWAYS_ON)) {
+		/*
+		 * With slot regulator always-on, SW reset does not power cycle
+		 * the card. As a result, the card continues to stay in 1.8V
+		 * mode from previous init cycle and sends S18A=0 in response to
+		 * CMD8 even though it supports 1.8V signalling.
+		 * Skip CMD11, set rocr to support 1.8V for S18A=0 response from
+		 * the card if slot is fed from always-on supply and
+		 * continue with UHS mode init.
+		 * If S18A=0 response is due to an HS card plugin, all subsequent
+		 * commands at 1.8V will fail and the host controller enumerates
+		 * the card in HS mode in the next retry.
+		 */
+		err = __mmc_set_signal_voltage(host, MMC_SIGNAL_VOLTAGE_180);
+		if (!err) {
+			*rocr |= SD_ROCR_S18A;
+		}
+		fallback = 1;
+		retries = 5;
 	}
 
 	if (mmc_host_is_spi(host))
@@ -808,6 +828,17 @@ int mmc_sd_get_cid(struct mmc_host *host, u32 ocr, u32 *cid, u32 *rocr)
 	else
 		err = mmc_all_send_cid(host, cid);
 
+	/* If immediate command after mandatory voltage switch fails with -ETIMEOUT,
+	 * it is most likely due to an HS card connected. Switch the voltage back to
+	 * 3.3V and re-try
+	 */
+	if (err == -ETIMEDOUT && fallback && retries) {
+		__mmc_set_signal_voltage(host, MMC_SIGNAL_VOLTAGE_330);
+		pr_warn("%s: fallback to HS enumeration.\n", mmc_hostname(host));
+		retries--;
+		goto try_again;
+	}
+
 	if (host->ops->voltage_switch_req)
 		host->ops->voltage_switch_req(host, true);
 
diff --git a/drivers/mmc/host/sdhci-tegra.c b/drivers/mmc/host/sdhci-tegra.c
index f2e6ed38dc07..c7a6f85c22b1 100644
--- a/drivers/mmc/host/sdhci-tegra.c
+++ b/drivers/mmc/host/sdhci-tegra.c
@@ -2390,6 +2390,9 @@ static int sdhci_tegra_probe(struct platform_device *pdev)
 	if (tegra_host->en_periodic_cflush)
 		host->mmc->caps2 |= MMC_CAP2_PERIODIC_CACHE_FLUSH;
 
+	if (tegra_host->vmmc_always_on)
+		host->mmc->caps2 |= MMC_CAP2_SLOT_REG_ALWAYS_ON;
+
 	host->mmc->caps2 |= MMC_CAP2_EN_CLK_TO_ACCESS_REG;
 	host->mmc->caps |= MMC_CAP_WAIT_WHILE_BUSY;
 
diff --git a/include/linux/mmc/host.h b/include/linux/mmc/host.h
index cf7705f3640b..577cae474de6 100644
--- a/include/linux/mmc/host.h
+++ b/include/linux/mmc/host.h
@@ -369,6 +369,7 @@ struct mmc_host {
 	u32			caps2;		/* More host capabilities */
 
 #define MMC_CAP2_BOOTPART_NOACC	(1 << 0)	/* Boot partition no access */
+#define MMC_CAP2_SLOT_REG_ALWAYS_ON (1 << 1)    /* Card slot regulator always on */
 #define MMC_CAP2_FULL_PWR_CYCLE	(1 << 2)	/* Can do full power cycle */
 #define MMC_CAP2_HS200_1_8V_SDR	(1 << 5)        /* can support */
 #define MMC_CAP2_HS200_1_2V_SDR	(1 << 6)        /* can support */
-- 
2.17.1

